#!/usr/bin/env perl

use 5.010001;
use strict;
use warnings FATAL => 'all';

BEGIN {
  $PPI::XS_DISABLE = 1;    # noise control - Prevent warning
}

our $VERSION = '0.17_01';
use English qw( -no_match_vars );    # Avoids reg-ex performance penalty
local $OUTPUT_AUTOFLUSH = 1;

use Data::Printer {caller_info => 1, colored => 1,};

# we are doing this so we can run from git during development
# perl ~/GitHub/App-Midgen/script/midgen
use FindBin qw($Bin);
use lib map {"$Bin/$_"} qw( lib ../lib );

use App::Midgen;
use Time::Stamp 'gmstamp';

#######
# get options from ~/.midgenrc
#######

# Encode and decode JSON
use JSON::Tiny;
my $json = JSON::Tiny->new;

use File::Spec;
use File::Slurp qw(read_file write_file);

my $midgenrc = File::Spec->catfile($ENV{HOME}, '.midgenrc');

my $config;
if (-e $midgenrc) {
  $config = $json->decode(read_file($midgenrc));
}


#######
# Start of Menu
#######
use Getopt::Long;
Getopt::Long::Configure('bundling');
use Pod::Usage;
my $help      = 0;
my $core      = $config->{core} || 0;         # show perl core modules as well
my $dual_life = $config->{dual_life} || 0;    # show dule-life modules
my $verbose
  = $config->{verbose} || 0;    # option variable with default value (false)
my @format = $config->{format} || 'dsl';
my $mojo   = $config->{mojo}   || 0;       # show the Mojo detection
my $noisy_children = $config->{noisy_children} || 0;  # unwanted noisy children
my $twins          = $config->{twins}          || 0;  # unwanted twins
my $zero  = $config->{zero} || 0;    # display 0 instead of core
my $debug = 0;                       # lots of good stuff here :)
my $write = 0;                       # write current configuration
GetOptions(
  'verbose|v!'        => \$verbose,
  'core|c!'           => \$core,
  'dual_life|l!'      => \$dual_life,
  'help|h|?'          => \$help,
  'mojo|m!'           => \$mojo,
  'format|f=s'        => \@format,
  'twins|t!'          => \$twins,
  'noisy_children|n!' => \$noisy_children,
  'zero|z!'           => \$zero,
  'debug|d'           => sub {
    $core           = 1;
    $verbose        = 1;
    $mojo           = 1;
    $noisy_children = 1;
    $twins          = 1;
    $debug          = 1;
  },
  'write|w' => \$write,
) or pod2usage(2);
pod2usage(1) if $help;

#######
# run App::Midgen
#######

say 'Running midgen v' . $VERSION;
say 'Stamped -> ' . gmstamp($BASETIME);

my $midgen = App::Midgen->new(
  core           => $core,
  dual_life      => $dual_life,
  verbose        => $verbose,
  format         => $format[-1],
  mojo           => $mojo,
  noisy_children => $noisy_children,
  twins          => $twins,
  zero           => $zero,
  debug          => $debug,
);

p $midgen if $debug;

$midgen->run();

#######
# write config to ~/.midgenrc
#######
if ($write) {
  my $midgenrc_data = $json->encode(
    {
      core           => $core,
      dual_life      => $dual_life,
      verbose        => $verbose,
      format         => $format[-1],
      mojo           => $mojo,
      noisy_children => $noisy_children,
      twins          => $twins,
      zero           => $zero,
    }
  );

  p $midgenrc_data;
  write_file($midgenrc, $midgenrc_data);
}

#######
# time and exit
#######
my $run_time = time - $BASETIME;
say 'I just spent ' . $run_time . 's doing all that for you enjoy';
say '__END__';

exit(0);

__END__

=pod

=encoding utf8

=head1 NAME

midgen - Check B<requires> & B<test_requires> of your package for CPAN inclusion.

=head1 VERSION

This document describes midgen version: 0.17_01

=head1 SYNOPSIS

Change to the root of your package and run, cmd line options always overright options from ~/.midgenrc if you have one.

 midgen

Now with a Getopt --help or -?

 midgen -?

or

 midgen [options]

=head1 OPTIONS

=over 4

=item B<--help or -h>

Prints a help message and exits.

 Options:
   --help           brief help message
   --format         change output format
   --core           show perl core modules
   --verbose        take a little peek as to what is going on
   --mojo           enable this under dev feature
   --noisy_children enable this under dev feature
   --twins          enable this under dev feature
   --zero           show a 0 instead of core
   --debug          a vast amount of noise, re self dev

=item B<--format or -f>

By default we output to STDOUT in 'dsl' format, 
so you can check, copy n paste or select an alternative format as shown below.

 midgen -f dsl		# Module::Include::DSL
 midgen -f mi		# Module::Include
 midgen -f build	# Build
 midgen -f dzil		# Dist::Zilla
 midgen -f dist		# dist.ini

=item B<--core or -c>

 * Shows modules that are in Perl core
 * some modules have a version number eg; constant, Carp
 * some have a version of 0 eg; strict, English
 * also show any recommends that we found

=item B<--verbose or -v>

Show file names that we are checking, as we go

 midgen -v

=item B<--mojo or -m>

Enable this dev feature to turn on extra output to show the /Mojo/ 
to Mojolicious catch, as we find them,
suggest you incorporate it with verbose for maximum affect

 midgen -vm

=item B<--noisy_children or -n>

Enable this dev feature to turn on extra output to show the modules 
considered to be noisy children, as we find them,
suggest you incorporate it with verbose for maximum affect

 midgen -vn

=item B<--twins or -t>

Enable this dev feature to turn on extra output to show the modules 
that are twins, as we find them, as we find them,
suggest you incorporate it with noisy_children for maximum affect

 midgen -nt
 
=item B<--zero or z>

Use a '0' instead of 'core' for core module version number, suggest you incorporate it with core for maximum affect

 midgen -cz

=item B<--write or -w>

you can now write your current options to ~/.midgenrc in JSON format, to be used again, don't forget to use the Getopt --no-option to negate

 midgen --no-v -w

=item B<--debug or -d>

equivalent of -cnmptv and some :))

uses L<Data::Printer>

suggest you consider redirecting STDERR when the debug option is used

 midgen -d 2>debug.txt

=back

=head1 AUTHOR

See L<App::Midgen>

=head2 CONTRIBUTORS

See L<App::Midgen>

=head1 COPYRIGHT

See L<App::Midgen>

=head1 LICENSE

See L<App::Midgen>

=cut
